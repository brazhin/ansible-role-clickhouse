---
access_control_improvements:
    # Enables logic that users without permissive row policies can still read rows using a SELECT query.
    # For example, if there two users A, B and a row policy is defined only for A, then
    # if this setting is true the user B will see all rows, and if this setting is false the user B will see no rows.
    # By default this setting is false for compatibility with earlier access configurations.
    users_without_row_policies_can_read_rows: false

    # By default, for backward compatibility ON CLUSTER queries ignore CLUSTER grant,
    # however you can change this behaviour by setting this to true
    on_cluster_queries_require_cluster_grant: true

    # By default, for backward compatibility "SELECT * FROM system.<table>" doesn't require any grants and can be executed
    # by any user. You can change this behaviour by setting this to true.
    # If it's set to true then this query requires "GRANT SELECT ON system.<table>" just like as for non-system tables.
    # Exceptions: a few system tables ("tables", "columns", "databases", and some constant tables like "one", "contributors")
    # are still accessible for everyone; and if there is a SHOW privilege (e.g. "SHOW USERS") granted the corresponding system
    # table (i.e. "system.users") will be accessible.
    select_from_system_db_requires_grant: true

    # By default, for backward compatibility "SELECT * FROM information_schema.<table>" doesn't require any grants and can be
    # executed by any user. You can change this behaviour by setting this to true.
    # If it's set to true then this query requires "GRANT SELECT ON information_schema.<table>" just like as for ordinary tables.
    select_from_information_schema_requires_grant: false

    # By default, for backward compatibility a settings profile constraint for a specific setting inherit every not set field from
    # previous profile. You can change this behaviour by setting this to true.
    # If it's set to true then if settings profile has a constraint for a specific setting, then this constraint completely cancels all
    # actions of previous constraint (defined in other profiles) for the same specific setting, including fields that are not set by new constraint.
    # It also enables 'changeable_in_readonly' constraint type
    settings_constraints_replace_previous: false
